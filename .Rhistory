theme_minimal() +
scale_y_continuous(limits = c(0,15), breaks = seq(0, 15, 5)) +
scale_x_continuous(limits = c(0, 360), breaks = seq(0, 360, 36)) +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
# ============== Figure 23.4 ==========================
CumLossPct <- data.frame(CumLoss[,2:1001]/1000000)
CumLossPct<- cbind(num.period, CumLossPct)
CumLossPct <- melt(CumLossPct, id = "num.period")
colnames(CumLossPct) <- c("Period", "Variable", "Value" )
ggplot(CumLossPct, aes(x=Period, y = Value * 100, colour = Variable, group = Variable)) +
geom_line(size = .5, alpha = 1) +
scale_colour_manual(values = cbbPalette) +
labs(colour = "Legend", linetype = "Legend", x = "Time Period (mos.)", y = "Cumulative Principal Default") +
theme_minimal() +
scale_y_continuous(limits = c(0,40), breaks = seq(0, 40, 5)) +
scale_x_continuous(limits = c(0, 360), breaks = seq(0, 360, 36)) +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
# =============== Figure 23.5 ===========================
mean(as.numeric(subset(CumLoss[,2:1001]/1000000, CumLoss$CumLoss == 360)))
CumLoss <- data.frame(CumLoss)
ggplot(subset(CumLossPct, CumLossPct$Period == 360), aes(x= Value * .35 * 100)) +
geom_histogram(aes(y=..density..),
binwidth = .1,
colour = "lightgrey",
fill = "#0072B2") +
geom_density(alpha = .5, fill = "#0072B2", colour = "lightgrey") +
theme_minimal() +
ylab("Density of Loss Function")+
xlab("Cumulative Loss") +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
# ============== Figure 23.6 ========================
CumDensityData <- melt(subset(CumLoss[,2:1001]/1000000, CumLoss$CumLoss == 360) * .35)
ggplot(CumDensityData, aes(value * 100)) +
stat_ecdf(colour = "#0072B2", size = 1) +
geom_segment(aes(x = 0, y = .99, xend = 8.5, yend = .99), linetype = "longdash") +
geom_segment(aes(x = 8.5, y = 0, xend = 8.5, yend = .99), linetype = "longdash") +
#geom_segment(aes(x = 0, y = .95, xend = 12.5, yend = .95), linetype = "dotdash") +
#geom_segment(aes(x = 12.5, y = 0, xend = 12.5, yend = .95), linetype = "dotdash") +
theme_minimal() +
annotate("text", x = 3.0, y = .97, label = "99% Confidence") +
annotate("text", x = 3.0, y = .93, label = "8.5% Subordination") +
#annotate("text", x = 4.5, y = .72, label = "70% Confidence") +
#annotate("text", x = 4.5, y = .68, label = "8% Subordination") +
ylab("Cumulative Density of Loss Function")+
xlab("Cumulative Loss pct (%)") +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
require(reshape2)
require(ggplot2)
require(BondLab)
Palette <- c("#E69F00",
"#56B4E9",
"#CC79A7",
"#009E73",
"#F0E442",
"#D55E00",
"#0072B2",
"#000000")
cbbPalette <- rep(Palette, length.out = 1000)
settlement.date = "01-13-2013"
trade.date = "01-10-2013"
sigma = .015
months.in.year = 12
issue.date = as.Date(bond.id@IssueDate, "%m-%d-%Y")
start.date = as.Date(bond.id@DatedDate, "%m-%d-%Y")
end.date = as.Date(bond.id@Maturity, "%m-%d-%Y")
lastpmt.date = as.Date(bond.id@LastPmtDate, "%m-%d-%Y")
nextpmt.date = as.Date(bond.id@NextPmtDate, "%m-%d-%Y")
coupon = bond.id@Coupon
frequency = bond.id@Frequency
delay = bond.id@PaymentDelay
factor = bond.id@MBSFactor
settlement.date = as.Date(c(settlement.date), "%m-%d-%Y")
#Call Rates Data
rates.data = Rates(trade.date = trade.date)
short.rate = as.numeric(rates.data[1,2])/100
#Call Mortgage Rate
MortgageRate = MtgRate()
#Call MBS data
bond.id = MBS(MBS.id = "bondlabMBS4")
Burnout = bond.id@Burnout
ModelTune = ModelTune(bond.id = bond.id)
#Override Voluntary repayment
ModelTune@TurnoverRate <- 0
ModelTune@Incentive.Fast.theta.1 <- 0
ModelTune@Incentive.Fast.theta.2 <- 0
ModelTune@Incentive.Slow.theta.1 <- 0
ModelTune@Incentive.Slow.theta.2 <- 0
#Calculate the number of cashflows that will be paid from settlement date
#to the last pmt date (used end date as next pmdt date for this)
ncashflows = BondBasisConversion(issue.date = issue.date,
start.date = start.date,
end.date = end.date,
settlement.date = settlement.date,
lastpmt.date = lastpmt.date,
nextpmt.date = end.date)
#Build a vector of dates for the payment schedule
#first get the pmtdate interval
pmtdate.interval = months.in.year/frequency
#Compute the payment dates
pmtdate = as.Date(c(if(settlement.date == issue.date)
{seq(start.date, end.date, by = paste(pmtdate.interval, "months"))}
else
{seq(nextpmt.date, end.date, by = paste(pmtdate.interval, "months"))}), "%m-%d-%Y") + delay
#Build the time period vector (n) for discounting the cashflows nextpmt date
#is vector of payment dates to n for each period
time.period = BondBasisConversion(issue.date = issue.date,
start.date = start.date,
end.date = end.date,
settlement.date = settlement.date,
lastpmt.date = lastpmt.date,
nextpmt.date = pmtdate)
#step4 Count the number of cashflows
#num.periods is the total number of cashflows to be received
#num.period is the period in which the cashflow is received
num.periods = length(time.period)
num.period = seq(1:num.periods)
#Calibrate the CIR Model
Market.Fit <- CalibrateCIR(trade.date = trade.date, sigma = sigma)
kappa  = Market.Fit$p1
lambda = Market.Fit$p2
theta  = Market.Fit$p3
set.seed(300)
InterestRateSimulation <- CIRSim(shortrate = 0.025,
kappa = .13,
theta = .02,
T = 30,
step = (1/12),
sigma = .015,
N = 1000)
require(reshape2)
require(ggplot2)
require(BondLab)
Palette <- c("#E69F00",
"#56B4E9",
"#CC79A7",
"#009E73",
"#F0E442",
"#D55E00",
"#0072B2",
"#000000")
cbbPalette <- rep(Palette, length.out = 1000)
settlement.date = "01-13-2013"
trade.date = "01-10-2013"
sigma = .015
months.in.year = 12
issue.date = as.Date(bond.id@IssueDate, "%m-%d-%Y")
start.date = as.Date(bond.id@DatedDate, "%m-%d-%Y")
end.date = as.Date(bond.id@Maturity, "%m-%d-%Y")
lastpmt.date = as.Date(bond.id@LastPmtDate, "%m-%d-%Y")
nextpmt.date = as.Date(bond.id@NextPmtDate, "%m-%d-%Y")
coupon = bond.id@Coupon
frequency = bond.id@Frequency
delay = bond.id@PaymentDelay
factor = bond.id@MBSFactor
settlement.date = as.Date(c(settlement.date), "%m-%d-%Y")
#Call Rates Data
rates.data = Rates(trade.date = trade.date)
short.rate = as.numeric(rates.data[1,2])/100
#Call Mortgage Rate
MortgageRate = MtgRate()
#Call MBS data
bond.id = MBS(MBS.id = "bondlabMBS4")
Burnout = bond.id@Burnout
ModelTune = ModelTune(bond.id = bond.id)
#Override Voluntary repayment
ModelTune@TurnoverRate <- 0
ModelTune@Incentive.Fast.theta.1 <- 0
ModelTune@Incentive.Fast.theta.2 <- 0
ModelTune@Incentive.Slow.theta.1 <- 0
ModelTune@Incentive.Slow.theta.2 <- 0
#Calculate the number of cashflows that will be paid from settlement date
#to the last pmt date (used end date as next pmdt date for this)
ncashflows = BondBasisConversion(issue.date = issue.date,
start.date = start.date,
end.date = end.date,
settlement.date = settlement.date,
lastpmt.date = lastpmt.date,
nextpmt.date = end.date)
issue.date = as.Date(bond.id@IssueDate, "%m-%d-%Y")
start.date = as.Date(bond.id@DatedDate, "%m-%d-%Y")
issue.date = as.Date(bond.id@IssueDate, "%m-%d-%Y")
start.date = as.Date(bond.id@DatedDate, "%m-%d-%Y")
end.date = as.Date(bond.id@Maturity, "%m-%d-%Y")
lastpmt.date = as.Date(bond.id@LastPmtDate, "%m-%d-%Y")
nextpmt.date = as.Date(bond.id@NextPmtDate, "%m-%d-%Y")
coupon = bond.id@Coupon
frequency = bond.id@Frequency
delay = bond.id@PaymentDelay
factor = bond.id@MBSFactor
settlement.date = as.Date(c(settlement.date), "%m-%d-%Y")
#Call Rates Data
rates.data = Rates(trade.date = trade.date)
short.rate = as.numeric(rates.data[1,2])/100
#Call Mortgage Rate
MortgageRate = MtgRate()
#Call MBS data
bond.id = MBS(MBS.id = "bondlabMBS4")
Burnout = bond.id@Burnout
ModelTune = ModelTune(bond.id = bond.id)
#Override Voluntary repayment
ModelTune@TurnoverRate <- 0
ModelTune@Incentive.Fast.theta.1 <- 0
ModelTune@Incentive.Fast.theta.2 <- 0
ModelTune@Incentive.Slow.theta.1 <- 0
ModelTune@Incentive.Slow.theta.2 <- 0
#Calculate the number of cashflows that will be paid from settlement date
#to the last pmt date (used end date as next pmdt date for this)
ncashflows = BondBasisConversion(issue.date = issue.date,
start.date = start.date,
end.date = end.date,
settlement.date = settlement.date,
lastpmt.date = lastpmt.date,
nextpmt.date = end.date)
#Build a vector of dates for the payment schedule
#first get the pmtdate interval
pmtdate.interval = months.in.year/frequency
#Compute the payment dates
pmtdate = as.Date(c(if(settlement.date == issue.date)
{seq(start.date, end.date, by = paste(pmtdate.interval, "months"))}
else
{seq(nextpmt.date, end.date, by = paste(pmtdate.interval, "months"))}), "%m-%d-%Y") + delay
#Build the time period vector (n) for discounting the cashflows nextpmt date
#is vector of payment dates to n for each period
time.period = BondBasisConversion(issue.date = issue.date,
start.date = start.date,
end.date = end.date,
settlement.date = settlement.date,
lastpmt.date = lastpmt.date,
nextpmt.date = pmtdate)
#step4 Count the number of cashflows
#num.periods is the total number of cashflows to be received
#num.period is the period in which the cashflow is received
num.periods = length(time.period)
num.period = seq(1:num.periods)
#Calibrate the CIR Model
Market.Fit <- CalibrateCIR(trade.date = trade.date, sigma = sigma)
kappa  = Market.Fit$p1
lambda = Market.Fit$p2
theta  = Market.Fit$p3
#Call CIR Model
#The CIR Model will pass the rates data to both the prepayment model
#and the home price simulation model
set.seed(300)
InterestRateSimulation <- CIRSim(shortrate = 0.025,
kappa = .13,
theta = .02,
T = 30,
step = (1/12),
sigma = .015,
N = 1000)
#Create the matrix of simulated Home Prices
HomePriceSimulation <- NULL
for(i in 1:ncol(InterestRateSimulation)){
HomePrice = HPISim(shortrate = InterestRateSimulation[2,i],
LongTermGrowth = .025,
sigma = 0.015,
T = 30,
step = 1/12,
N = 1)
HomePriceSimulation = cbind(HomePriceSimulation, HomePrice)}
#================ Loop through the home price simulations ===============
DefaultVector = num.period
LossAmount = num.period
CumLoss = num.period
AvgLife = NULL
for(j in 1:ncol(InterestRateSimulation)) {
cum.rate = cumprod(1 + InterestRateSimulation[2:361,j])
spot.rate = (((cum.rate^(1/num.period)) ^ (1/months.in.year))-1)
TermStructure <- new("TermStructure",
tradedate = "01-10-2013",
period = num.period,
date = as.character(pmtdate),
spotrate = spot.rate,
forwardrate = InterestRateSimulation[2:361,j],
TwoYearFwd = CIRBondPrice(shortrate = as.numeric(InterestRateSimulation[2:361, j]),
kappa = kappa,
lambda = lambda,
theta =  theta,
sigma = sigma,
T = 2, step = 0,
result = "y") * 100,
TenYearFwd = CIRBondPrice(shortrate = as.numeric(InterestRateSimulation[2:361, j]),
kappa = kappa,
lambda = lambda,
theta = theta,
sigma = sigma,
T = 10, step = 0,
result = "y") * 100)
ProjectedDefault <- PrepaymentAssumption(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
PrepaymentAssumption = "MODEL",
ModelTune = ModelTune,
Burnout = Burnout,
CPR = 0,
HomePrice = HomePriceSimulation[2:361,j])
MortgageCashFlow <- MortgageCashFlow(bond.id = bond.id,
original.bal = 1000000,
settlement.date = settlement.date,
price = 100,
PrepaymentAssumption = ProjectedDefault)
DefaultVector = cbind(DefaultVector, ProjectedDefault@MDR)
LossAmount = cbind(LossAmount, MortgageCashFlow@DefaultedPrin)
CumLoss <- cbind(CumLoss, cumsum(MortgageCashFlow@DefaultedPrin))
AvgLife <- append(AvgLife, MortgageCashFlow@WAL)
}
# ============== Figure 21.1 =========================
set.seed(300)
HPI = HPISim(shortrate = .0025,
LongTermGrowth = .025,
sigma = 0.015,
T = 30,
step = 1/12,
N = 10)
Period <- seq(1, 360, 1)
HPI <- data.frame(Period, HPI[2:361,])
HPI <- melt(HPI, id = "Period")
ggplot(HPI, aes(x = Period, y = value, colour = variable, linetype = variable)) +
geom_line(size = 1) +
scale_colour_manual(values = cbbPalette) +
labs(colour = "Legend", linetype = "Legend", x = "Time Period (mos.)", y = "Home Price Index") +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.grid.major = element_line(size = .25, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20))
set.seed(300)
HPI = HPISim(shortrate = .20,
LongTermGrowth = .025,
sigma = 0.015,
T = 30,
step = 1/12,
N = 10)
Period <- seq(1, 360, 1)
HPI <- data.frame(Period, HPI[2:361,])
HPI <- melt(HPI, id = "Period")
ggplot(HPI, aes(x = Period, y = value, colour = variable, linetype = variable)) +
geom_line(size = 1) +
scale_colour_manual(values = cbbPalette) +
labs(colour = "Legend", linetype = "Legend", x = "Time Period (mos.)", y = "Home Price Index") +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.grid.major = element_line(size = .25, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20))
Default <- data.frame(DefaultVector)
Default <- melt(Default, id = "DefaultVector")
colnames(Default) <- c("Period", "Variable", "Value" )
ggplot(Default, aes(x=Period, y = (1-(1-Value)^12) * 100, colour = Variable, group = Variable)) +
geom_line(size = .5, alpha = 1) +
scale_colour_manual(values = cbbPalette) +
labs(colour = "Legend", linetype = "Legend", x = "Time Period (mos.)", y = "Annualized Monthly Default Rate") +
theme_minimal() +
scale_y_continuous(limits = c(0,15), breaks = seq(0, 15, 5)) +
scale_x_continuous(limits = c(0, 360), breaks = seq(0, 360, 36)) +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
CumLossPct <- data.frame(CumLoss[,2:1001]/1000000)
CumLossPct<- cbind(num.period, CumLossPct)
CumLossPct <- melt(CumLossPct, id = "num.period")
colnames(CumLossPct) <- c("Period", "Variable", "Value" )
ggplot(CumLossPct, aes(x=Period, y = Value * 100, colour = Variable, group = Variable)) +
geom_line(size = .5, alpha = 1) +
scale_colour_manual(values = cbbPalette) +
labs(colour = "Legend", linetype = "Legend", x = "Time Period (mos.)", y = "Cumulative Principal Default") +
theme_minimal() +
scale_y_continuous(limits = c(0,40), breaks = seq(0, 40, 5)) +
scale_x_continuous(limits = c(0, 360), breaks = seq(0, 360, 36)) +
theme(panel.grid.major = element_line(size = .50, color = "grey")) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
theme(legend.position = "none")
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
MakeMBSDetails(
Cusip = "12345678",
ID = "bondlabMBS55",
BondType = "MBS",
Sector = "MBS",
Coupon = 5.5,
IssueDate = "01-01-2010",
DatedDate = "01-01-2010",
Maturity = "01-01-2040",
LastPmtDate = "01-01-2013",
NextPmtDate = "02-01-2013",
Term = 360,
WALA = 36,
WAM = 324,
PaymentDelay = 24,
Moody = "Aaa",
SP = "AAA",
BondLab = "Aaa",
Frequency = 12,
BondBasis = "30360",
GWac = 6.1,
OrigLoanBal = 225000,
OrigLTV = 80,
AmortizationType = "fixed",
AmortizationTerm = 30,
Index = "None",
Margin = 0,
FirstPmtDate = "01-01-2010",
FinalPmtDate = "01-01-2030",
Servicing = 0.25,
PMI = 0.25,
Gfee = 0.25,
InitialInterest = FALSE,
InterestOnlyPeriod = 0,
FirstPrinPaymentDate = "01-01-2013",
BalloonPmt = FALSE,
BalloonDate = "00-00-0000",
MBSFactor = .75,
Model = "FH30.Generic",
Burnout = 25,
SATO = 0.25
)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
gzfile(description = paste(system.file(package = "BondLab"),
"/Temp_BondData/","TempPassThrough.rds", sep = ""))
paste(system.file(package = "BondLab"),
"/Temp_BondData/","TempPassThrough.rds", sep = "")
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
connTemp <-  gzfile(description = paste(system.file(package = "BondLab"),
"/Temp_BondData/","TempPassThrough.rds", sep = ""))
connTemp
connMBSDetails <- gzfile(description = paste(system.file(package = "BondLab"),
"/BondData/",MBSID, ".rds", sep = ""))
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
library(BondLab)
600000000 * .01
150 * 2000
150 * 2000 * 12
library(BondLab)
library(BondLab)
