Sector = "USGovt",
Issuer = "US Treasury",
Underwriter = "US Treasury",
OfferAmount = 24000000,
Coupon = 2.750,
IssueDate = "02-15-2014",
DatedDate = "02-15-2014",
Maturity = "02-15-2024",
LastPmtDate = LastPmtDate,
NextPmtDate = NextPmtDate,
Moody = "Aa",
SP = "Aa",
BondLab = "BBB",
Frequency = 2,
BondBasis = "30360",
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE)
}
# make my 30-year Treasury Bond
make_my_TB30 = function(start_date) {
sett_date = add.bizdays(start_date, 3, cal)
# sett_date = as.Date(mondate(sett_date)+1)
LastPmtDate = as.Date("2014-11-15")
NextPmtDate = as.Date("2015-05-15")
while (sett_date > NextPmtDate) {
last_date = format(as.Date(mondate(LastPmtDate)+6), "%m-%d-%Y")
last_month = as.numeric(format(as.Date(last_date, "%m-%d-%Y"), "%m"))
last_year = as.numeric(format(as.Date(last_date, "%m-%d-%Y"), "%Y"))
LastPmtDate = as.Date(paste(last_month,"-","15","-",last_year,sep=""), "%m-%d-%Y")
next_date = format(as.Date(mondate(NextPmtDate)+6), "%m-%d-%Y")
next_month = as.numeric(format(as.Date(next_date, "%m-%d-%Y"), "%m"))
next_year = as.numeric(format(as.Date(next_date, "%m-%d-%Y"), "%Y"))
NextPmtDate = as.Date(paste(next_month,"-","15","-",next_year,sep=""), "%m-%d-%Y")
}
LastPmtDate = format(LastPmtDate, "%m-%d-%Y")
NextPmtDate = format(NextPmtDate, "%m-%d-%Y")
TB30 = MakeBondDetails(
Cusip = "912810RJ9",
ID = "912810RJ9US912810RJ97",
BondType = "UST",
Sector = "USGovt",
Issuer = "US Treasury",
Underwriter = "US Treasury",
OfferAmount = 16000000,
Coupon = 3.000,
IssueDate = "11-15-2014",
DatedDate = "11-15-2014",
Maturity = "11-15-2044",
LastPmtDate = LastPmtDate,
NextPmtDate = NextPmtDate,
Moody = "Aa",
SP = "Aa",
BondLab = "BBB",
Frequency = 2,
BondBasis = "30360",
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE)
}
# get list of trading holidays
get_holidays = function() {
new_years = as.Date("01/01/2015", "%m/%d/%Y")
martin_luther_king_day = as.Date("01/19/2015", "%m/%d/%Y")
presidents_day = as.Date("02/16/2015", "%m/%d/%Y")
good_friday = as.Date("03/03/2015", "%m/%d/%Y")
memorial_day = as.Date("05/25/2015", "%m/%d/%Y")
july1 = as.Date("06/03/2015", "%m/%d/%Y")
july2 = as.Date("06/04/2015", "%m/%d/%Y")
labor_day = as.Date("09/07/2015", "%m/%d/%Y")
thanksgiving = as.Date("11/26/2015", "%m/%d/%Y")
christmas_day = as.Date("12/25/2015", "%m/%d/%Y")
holidays = c(new_years, martin_luther_king_day, presidents_day, good_friday, memorial_day, july1, july2, labor_day, thanksgiving, christmas_day)
return(holidays)
}
# get MBS price on date
get_MBS_price = function(i, date) {
p = passthroughs[[i]]
price = p[p$Date == date, 'PX_LAST'] + .00000000001
return(price)
}
# get Treasury Future and Treasury Bond prices on date
get_T_prices <- function(date) {
TF2_price = TU15[TU15$Date == date, 'PX_LAST'] + .00000000001
TF10_price = TY15[TY15$Date == date, 'PX_LAST'] + .00000000001
TF30_price = US15[US15$Date == date, 'PX_LAST'] + .00000000001
TB2_price = TB2[TB2$Date == date, 'PX_LAST'] + .00000000001
TB10_price = TB2[TB10$Date == date, 'PX_LAST'] + .00000000001
TB30_price = TB2[TB30$Date == date, 'PX_LAST'] + .00000000001
return( c(TF2_price, TF10_price, TF30_price, TB2_price, TB10_price, TB30_price) )
}
# get formatted table of shifted rates
get_rates = function(date, shift) {
rates = interp_yields[interp_yields$Date == date, ]
rates = rates[3:362]
rates = rates[c(1,3,6,12,24,36,48,60,84,120,360)]
for (i in 1:11) {
rates[1, i] = rates[1, i] + shift[1, i]/100
}
namelist = c("Date","ED1M","ED3M","ED6M","USSW1","USSW2","USSW3","USSW4","USSW5","USSW7","USSW10","USSW30")
rate = c(as.character(as.Date(date, format = "%m-%d-%Y")),
as.character(rates[1]),
as.character(rates[2]),
as.character(rates[3]),
as.character(rates[4]),
as.character(rates[5]),
as.character(rates[6]),
as.character(rates[7]),
as.character(rates[8]),
as.character(rates[9]),
as.character(rates[10]),
as.character(rates[11])
)
tenor = c(as.character(""),"0.0833","0.25","0.5","1","2","3","4","5","7","10","30")
namelist = c("Date","ED1M","ED3M","ED6M","USSW1","USSW2","USSW3","USSW4","USSW5","USSW7","USSW10","USSW30")
curve_data <- as.data.frame(rbind(rate, tenor), stringsAsFactors = FALSE)
colnames(curve_data) = namelist
return(curve_data)
}
# get new MBS price on date with shifted yield curve
get_new_MBS_price = function(i, date, price, shift) {
p = make_my_MBS(i, date)
settlement_date = add.bizdays(date, 3, cal)
settlement_date = format(settlement_date, "%m-%d-%Y")
price <- PriceTypes(price = price)
orig.bal <- 1000000
curve <- get_rates(date, no_shift)
term_structure <- TermStructure(rates.data = curve, method = 'dl')
prepayment <- PrepaymentModel(bond.id = p,
TermStructure = term_structure,
MortgageRate = MtgRate(),
ModelTune = ModelTune(bond.id = p),
Burnout = BurnOut(p),
PrepaymentAssumption = "MODEL")
pCF <- tryCatch(
MortgageCashFlow(bond.id = p,
original.bal = orig.bal,
settlement.date = settlement_date,
price = PriceDecimalString(price),
PrepaymentAssumption = prepayment)
,error = function(e) print(e)
,warning = function(w) print(w)
,message = function(m) print(m))
proceeds <- (PriceBasis(price) * orig.bal * MBSFactor(p)) + Accrued(pCF)
spreads <- CurveSpreads(rates.data = curve,
CashFlow = pCF,
TermStructure = term_structure,
proceeds = proceeds)
curve_shifted = get_rates(date, shift)
nc_scenario <- MortgageScenario(bond.id = p,
settlement.date = settlement_date,
rates.data = curve_shifted,
price = PriceDecimalString(price),
original.bal = orig.bal,
scenario = "NCs",
horizon.months = 1,
method = "dl",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(spreads))
# print(HorizonPrice(nc_scenario))
return( HorizonPrice(nc_scenario) )
}
# get new Treasury Bond price on date with shifted yield curve
get_new_TB_price = function(maturity, date, price, shift) {
# maturity = 10
# date = as.Date("2015-01-13")
# price = 100.01
# shift = level_shift
if (maturity == 2) {
make_my_TB2(date)
t <- Bond(Bond.id = "912828H29")
}
if (maturity == 10) {
make_my_TB10(date)
t <- Bond(Bond.id = "912828B66")
}
if (maturity == 30) {
make_my_TB30(date)
t <- Bond(Bond.id = "912810RJ9")
}
settlement_date = add.bizdays(date, 3, cal)
settlement_date = format(settlement_date, "%m-%d-%Y")
price <- PriceTypes(price = price)
principal <- 1000000
curve <- get_rates(date, no_shift)
term_structure <- TermStructure(rates.data = curve, method = 'dl')
cash_flow <- BondCashFlows(bond.id = t,
principal = principal,
settlement.date = settlement_date,
price = PriceDecimalString(price))
proceeds = principal * PriceBasis(price) + Accrued(cash_flow)
curve_spreads <- CurveSpreads(rates.data = curve,
CashFlow = cash_flow,
TermStructure = term_structure,
proceeds = proceeds)
curve_shifted = get_rates(date, shift)
print(t@LastPmtDate)
print(settlement_date)
print(t@NextPmtDate)
nc_bond_scenario <- BondScenario(bond.id = t,
settlement.date = settlement_date,
rates.data = curve_shifted,
price = PriceDecimalString(price),
principal = principal,
scenario = "U250s",
horizon.months = 1,
horizon.spot.spread = ZeroVolSpread(curve_spreads))
# print(HorizonPrice(nc_bond_scenario))
return( HorizonPrice(nc_bond_scenario) )
}
# get MBS changes in price for shift scenario
get_MBS_price_changes = function(i, date, price, shift) {
left_price = get_new_MBS_price(i, date, price, shift)
mid_price = get_new_MBS_price(i, date, price, no_shift)
right_price = get_new_MBS_price(i, date, price, -1*shift)
factor = price/mid_price
MBS_change = factor*(left_price - right_price)
return(MBS_change)
}
# get Treasury Future changes in price for shift scenario
get_TF_price_changes = function(date, prices, shift) {
TF2_price = prices[1]
TF10_price = prices[2]
TF30_price = prices[3]
TB2_price = prices[4]
TB10_price = prices[5]
TB30_price = prices[6]
TB2_left_price = get_new_TB_price(2, date, TB2_price, shift)
TB2_mid_price = get_new_TB_price(2, date, TB2_price, no_shift)
TB2_right_price = get_new_TB_price(2, date, TB2_price, -1*shift)
factor2 = TF2_price/TB2_mid_price
H2_change = factor2*(TB2_left_price - TB2_right_price)
TB10_left_price = get_new_TB_price(10, date, TB10_price, shift)
TB10_mid_price = get_new_TB_price(10, date, TB10_price, no_shift)
TB10_right_price = get_new_TB_price(10, date, TB10_price, -1*shift)
factor10 = TF10_price/TB10_mid_price
H10_change = factor10*(TB10_left_price - TB10_right_price)
TB30_left_price = get_new_TB_price(30, date, TB30_price, shift)
TB30_mid_price = get_new_TB_price(30, date, TB30_price, no_shift)
TB30_right_price = get_new_TB_price(30, date, TB30_price, -1*shift)
factor30 = TF30_price/TB30_mid_price
H30_change = factor30*(TB30_left_price - TB30_right_price)
return( c(H2_change, H10_change, H30_change) )
}
# get hedging ratios
get_ratios = function(h, level_changes, twist_changes, curve_changes) {
MBS_level = level_changes[1]
H2_level = level_changes[2]
H10_level = level_changes[3]
H30_level = level_changes[4]
MBS_twist = twist_changes[1]
H2_twist = twist_changes[2]
H10_twist = twist_changes[3]
H30_twist = twist_changes[4]
MBS_curve = curve_changes[1]
H2_curve = curve_changes[2]
H10_curve = curve_changes[3]
H30_curve = curve_changes[4]
if (h == 3) {
H2 = -1*( MBS_level*(H10_twist*H30_curve-H30_twist*H10_curve) - MBS_twist*(H10_level*H30_curve-H30_level*H10_curve) + MBS_curve*(H10_level*H30_twist-H30_level*H10_twist) ) / (  H2_level*(H10_twist*H30_curve-H30_twist*H10_curve) - H10_level*( H2_twist*H30_curve-H30_twist* H2_curve) + H30_level*( H2_twist*H10_curve-H10_twist* H2_curve) )
H10 = -((H2_twist*H30_curve-H30_twist*H2_curve)*H2 + MBS_twist*H30_curve - MBS_curve*H30_twist) / (H10_twist*H30_curve-H30_twist*H10_curve)
H30 = -(H2_curve*H2 + H10_curve*H10 + MBS_curve) / (H30_curve)
}
if (h == 2) {
H2 = -1*( MBS_level*H10_twist - MBS_twist*H10_level ) / (  H2_level*H10_twist - H10_level*H2_twist )
H10 = -(H2_twist*H2 + MBS_twist)/(H10_twist)
H30 = 0
}
if (h == 1) {
H2 = -MBS_level/H2_level
H10 = 0
H30 = 0
}
return( c(H2, H10, H30) )
}
# get start portfolio values
get_start_values = function(start_prices, ratios) {
MBS_start_price = start_prices[1]
inverse_price = (100/MBS_start_price)*100
H2 = ratios[1]
H10 = ratios[2]
H30 = ratios[3]
start_value = inverse_price*10000
start_value2 = start_value * H2
start_value10 = start_value * H10
start_value30 = start_value * H30
start_total_value = start_value + start_value2 + start_value10 + start_value30
return( c(start_value, start_value2, start_value10, start_value30, start_total_value) )
}
# get units purchased
get_units = function(prices, values) {
units   = values[1]/prices[1]
units2  = values[2]/prices[2]
units10 = values[3]/prices[3]
units30 = values[4]/prices[4]
return( c(units, units2, units10, units30) )
}
# getend portfolio values
get_end_values = function(end_prices, units) {
end_value   = units[1] * end_prices[1]
end_value2  = units[2] * end_prices[2]
end_value10 = units[3] * end_prices[3]
end_value30 = units[4] * end_prices[4]
end_total_value = end_value + end_value2 + end_value10 + end_value30
return( c(end_value, end_value2, end_value10, end_value30, end_total_value) )
}
# -------------------------------------------------------------------------- #
# Import Data
# -------------------------------------------------------------------------- #
MBS_info = read.csv("Data/MBS_Data/Mtge_Fields.csv")
typical_changes = read.csv("Data/Yield_Data/Typical_Changes.csv", header=TRUE)
interp_yields = read.csv("Data/Yield_Data/Interpolated_Yields.csv")
interp_yields$Date <- as.Date(interp_yields$Date, "%m/%d/%Y")
# Current Bond Prices
OM15 = interp_yields[interp_yields$Date >= as.Date('2015-01-02'), 2:3]
TB2 = read.csv('Data/Treasury_Bond_Data/Year2_Bond.csv', skip=6, header=TRUE)
TB10 = read.csv('Data/Treasury_Bond_Data/Year10_Bond.csv', skip=6, header=TRUE)
TB30 = read.csv('Data/Treasury_Bond_Data/Year30_Bond.csv', skip=6, header=TRUE)
# Futures Contract Prices
TU15 = read.csv('Data/Future_Data/TU15.csv', skip=5, header=TRUE)
TY15 = read.csv('Data/Future_Data/TY15.csv', skip=5, header=TRUE)
US15 = read.csv('Data/Future_Data/US15.csv', skip=5, header=TRUE)
# Fannie Mae MBS Prices
FNCL25 = read.csv('Data/MBS_Data/FNCL25.csv', skip=6, header=TRUE)
FNCL30 = read.csv('Data/MBS_Data/FNCL30.csv', skip=6, header=TRUE)
FNCL35 = read.csv('Data/MBS_Data/FNCL35.csv', skip=6, header=TRUE)
FNCL40 = read.csv('Data/MBS_Data/FNCL40.csv', skip=6, header=TRUE)
FNCL45 = read.csv('Data/MBS_Data/FNCL45.csv', skip=6, header=TRUE)
FNCL50 = read.csv('Data/MBS_Data/FNCL50.csv', skip=6, header=TRUE)
FNCL55 = read.csv('Data/MBS_Data/FNCL55.csv', skip=6, header=TRUE)
FNCL60 = read.csv('Data/MBS_Data/FNCL60.csv', skip=6, header=TRUE)
FNCL65 = read.csv('Data/MBS_Data/FNCL65.csv', skip=6, header=TRUE)
FNCL70 = read.csv('Data/MBS_Data/FNCL70.csv', skip=6, header=TRUE)
FNCL75 = read.csv('Data/MBS_Data/FNCL75.csv', skip=6, header=TRUE)
FNCL80 = read.csv('Data/MBS_Data/FNCL80.csv', skip=6, header=TRUE)
# Freddie Mac MBS Prices
FGLMC35 = read.csv('Data/MBS_Data/FGLMC35.csv', skip=6, header=TRUE)
FGLMC40 = read.csv('Data/MBS_Data/FGLMC40.csv', skip=6, header=TRUE)
FGLMC45 = read.csv('Data/MBS_Data/FGLMC45.csv', skip=6, header=TRUE)
FGLMC50 = read.csv('Data/MBS_Data/FGLMC50.csv', skip=6, header=TRUE)
FGLMC55 = read.csv('Data/MBS_Data/FGLMC55.csv', skip=6, header=TRUE)
FGLMC60 = read.csv('Data/MBS_Data/FGLMC60.csv', skip=6, header=TRUE)
FGLMC65 = read.csv('Data/MBS_Data/FGLMC65.csv', skip=6, header=TRUE)
FGLMC70 = read.csv('Data/MBS_Data/FGLMC70.csv', skip=6, header=TRUE)
FGLMC75 = read.csv('Data/MBS_Data/FGLMC75.csv', skip=6, header=TRUE)
FGLMC80 = read.csv('Data/MBS_Data/FGLMC80.csv', skip=6, header=TRUE)
cal = create.calendar(name = 'Actual', holidays = get_holidays(), weekdays = c("saturday","sunday"), start.date = "2015-01-01", end.date = "2015-12-31")
all_dates = as.Date('2015-01-02')
prev_date = as.Date('2015-01-02')
for (i in 1:22) {
next_date = add.bizdays(prev_date, 10, cal)
all_dates = c(all_dates, next_date)
prev_date = next_date
}
# -------------------------------------------------------------------------- #
# Format Data Tables
# -------------------------------------------------------------------------- #
TB2$Date <- as.Date(TB2$Date, "%m/%d/%y")
TB10$Date <- as.Date(TB10$Date, "%m/%d/%y")
TB30$Date <- as.Date(TB30$Date, "%m/%d/%y")
OM15$Date <- as.Date(OM15$Date, "%m/%d/%y")
TU15$Date <- as.Date(TU15$Date, "%m/%d/%y")
TY15$Date <- as.Date(TY15$Date, "%m/%d/%y")
US15$Date <- as.Date(US15$Date, "%m/%d/%y")
FNCL25$Date <- as.Date(FNCL25$Date, "%m/%d/%y")
FNCL30$Date <- as.Date(FNCL30$Date, "%m/%d/%y")
FNCL35$Date <- as.Date(FNCL35$Date, "%m/%d/%y")
FNCL40$Date <- as.Date(FNCL40$Date, "%m/%d/%y")
FNCL45$Date <- as.Date(FNCL45$Date, "%m/%d/%y")
FNCL50$Date <- as.Date(FNCL50$Date, "%m/%d/%y")
FNCL55$Date <- as.Date(FNCL55$Date, "%m/%d/%y")
FNCL60$Date <- as.Date(FNCL60$Date, "%m/%d/%y")
FNCL65$Date <- as.Date(FNCL65$Date, "%m/%d/%y")
FNCL70$Date <- as.Date(FNCL70$Date, "%m/%d/%y")
FNCL75$Date <- as.Date(FNCL75$Date, "%m/%d/%y")
FNCL80$Date <- as.Date(FNCL80$Date, "%m/%d/%y")
FGLMC35$Date <- as.Date(FGLMC35$Date, "%m/%d/%y")
FGLMC40$Date <- as.Date(FGLMC40$Date, "%m/%d/%y")
FGLMC45$Date <- as.Date(FGLMC45$Date, "%m/%d/%y")
FGLMC50$Date <- as.Date(FGLMC50$Date, "%m/%d/%y")
FGLMC55$Date <- as.Date(FGLMC55$Date, "%m/%d/%y")
FGLMC60$Date <- as.Date(FGLMC60$Date, "%m/%d/%y")
FGLMC65$Date <- as.Date(FGLMC65$Date, "%m/%d/%y")
FGLMC70$Date <- as.Date(FGLMC70$Date, "%m/%d/%y")
FGLMC75$Date <- as.Date(FGLMC75$Date, "%m/%d/%y")
FGLMC80$Date <- as.Date(FGLMC80$Date, "%m/%d/%y")
passthroughs = list(FNCL35, FNCL40, FNCL45, FNCL50, FNCL55, FNCL60, FNCL65, FNCL70, FNCL75, FNCL80, FGLMC35, FGLMC40, FGLMC45, FGLMC50, FGLMC55, FGLMC60, FGLMC65, FGLMC70, FGLMC75, FGLMC80)
table_indices = all_dates
nrows = length(table_indices)
riskless_profit = data.frame(matrix(vector(), nrows, 21, dimnames=list(c(), c("Date", 'FNCL35', 'FNCL40', 'FNCL45', 'FNCL50', 'FNCL55', 'FNCL60', 'FNCL65', 'FNCL70', 'FNCL75', 'FNCL80', 'FGLMC35', 'FGLMC40', 'FGLMC45', 'FGLMC50', 'FGLMC55', 'FGLMC60', 'FGLMC65', 'FGLMC70', 'FGLMC75', 'FGLMC80'))),stringsAsFactors=F)
riskless_profit["Date"] = table_indices
riskless_profit$Date <- as.Date(riskless_profit$Date, "%Y/%m/%d")
hedge3_profit = riskless_profit
hedge2_profit = riskless_profit
hedge1_profit = riskless_profit
# profit3_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit2_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit1_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit3_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit2_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit1_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# -------------------------------------------------------------------------- #
# Test Code
# -------------------------------------------------------------------------- #
# all_dates = bizseq(as.Date('2015-01-02'), as.Date('2015-12-31'), cal)
no_shift = data.frame(matrix(rep(0,11), 1, 11, dimnames=list(c(), c('X1','X3','X6','X12','X24','FX36','X48','X60','X84','X120','X360'))),stringsAsFactors=F)
level_shift = typical_changes[1, 3:13]
twist_shift = typical_changes[2, 3:13]
curve_shift = typical_changes[3, 3:13]
all_dates = all_dates[2:2]
start_time <- proc.time()
for (start_date in all_dates) {
# start_date = as.Date('2015-01-02')
start_date = as.Date(start_date, origin = '1970-01-01')
end_date = add.bizdays(start_date, 21, cal)
if ((start_date %in% TB10$Date) & (end_date %in% TB10$Date)) {
T_start_prices = get_T_prices(start_date)
T_end_prices = get_T_prices(end_date)
level_TF_changes = get_TF_price_changes(start_date, T_start_prices, level_shift)
twist_TF_changes = get_TF_price_changes(start_date, T_start_prices, twist_shift)
curve_TF_changes = get_TF_price_changes(start_date, T_start_prices, curve_shift)
for (i in 1:1) {
MBS_start_price = get_MBS_price(i, start_date)
MBS_end_price = get_MBS_price(i, end_date)
level_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, level_shift)
twist_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, twist_shift)
curve_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, curve_shift)
level_changes = c(level_MBS_changes, level_TF_changes)
twist_changes = c(twist_MBS_changes, twist_TF_changes)
curve_changes = c(curve_MBS_changes, curve_TF_changes)
start_prices = c(MBS_start_price, T_start_prices)
end_prices = c(MBS_end_price, T_end_prices)
for (h in 1:3) {
ratios = get_ratios(h, level_changes, twist_changes, curve_changes)
start_values = get_start_values(start_prices, ratios)
units = get_units(start_prices, start_values)
end_values = get_end_values(end_prices, units)
# Update Tables
start_total_value = start_values[5]
end_total_value = end_values[5]
dollar_change = end_total_value - start_total_value
if (h == 3)
hedge3_profit[hedge3_profit$Date == start_date, i+1] = dollar_change
if (h == 2)
hedge2_profit[hedge2_profit$Date == start_date, i+1] = dollar_change
if (h == 1)
hedge1_profit[hedge1_profit$Date == start_date, i+1] = dollar_change
}
start_value = (100/MBS_start_price)*100*10000
riskless_rate = OM15[OM15$Date == start_date, 'X1'] / 100
riskless_value = start_value * riskless_rate
riskless_profit[riskless_profit$Date == start_date, i+1] = riskless_value
}
end_time = proc.time() - start_time
print(end_time)
# hedge3_profit.dropna(inplace=True)
# hedge2_profit.dropna(inplace=True)
# hedge1_profit.dropna(inplace=True)
# riskless_profit.dropna(inplace=True)
# -------------------------------------------------------------------------- #
# Test Code 2
# -------------------------------------------------------------------------- #
# profit3_difference_change = hedge3_profit - riskless_profit
# profit2_difference_change = hedge2_profit - riskless_profit
# profit1_difference_change = hedge1_profit - riskless_profit
#
# profit3_percent_change = profit3_difference_change / riskless_profit
# profit2_percent_change = profit2_difference_change / riskless_profit
# profit1_percent_change = profit1_difference_change / riskless_profit
# -------------------------------------------------------------------------- #
library(BondLab)
6/2
max(6,1)
max(6,24)
library(BondLab)
6 %% 6
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
50 * 10000 * 12
library(BondLab)
c(0,1)
typeof(c(0,1))
typeof(as.character(c(0,1)))
as.character(c(0,1))
typeof(c(1,0))
c(1,0)
c(1,0) == 10
c(1,0) == 1 0
c(1,0) == as.double(10)
c(1,0) == c(1,0)
typeof(c(FALSE, FALSE))
c(FALSE, FALSE)
test <- c(FALSE, FALSE)
test == c(FALSE, FALSE)
library(BondLab)
as.numeric(TRUE)
as.numeric(FALSE)
library(BondLab)
12-6
12-6-1
2007-2006
library(BondLab)
#'@description Simulation of the 3-mo, 2-year, and 10-year forward.
library(BondLab)
termstrc::spr_dl
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
.37/100
3/100
library(BondLab)
