H30 = -(H2_curve*H2 + H10_curve*H10 + MBS_curve) / (H30_curve)
}
if (h == 2) {
H2 = -1*( MBS_level*H10_twist - MBS_twist*H10_level ) / (  H2_level*H10_twist - H10_level*H2_twist )
H10 = -(H2_twist*H2 + MBS_twist)/(H10_twist)
H30 = 0
}
if (h == 1) {
H2 = -MBS_level/H2_level
H10 = 0
H30 = 0
}
return( c(H2, H10, H30) )
}
# get start portfolio values
get_start_values = function(start_prices, ratios) {
MBS_start_price = start_prices[1]
inverse_price = (100/MBS_start_price)*100
H2 = ratios[1]
H10 = ratios[2]
H30 = ratios[3]
start_value = inverse_price*10000
start_value2 = start_value * H2
start_value10 = start_value * H10
start_value30 = start_value * H30
start_total_value = start_value + start_value2 + start_value10 + start_value30
return( c(start_value, start_value2, start_value10, start_value30, start_total_value) )
}
# get units purchased
get_units = function(prices, values) {
units   = values[1]/prices[1]
units2  = values[2]/prices[2]
units10 = values[3]/prices[3]
units30 = values[4]/prices[4]
return( c(units, units2, units10, units30) )
}
# getend portfolio values
get_end_values = function(end_prices, units) {
end_value   = units[1] * end_prices[1]
end_value2  = units[2] * end_prices[2]
end_value10 = units[3] * end_prices[3]
end_value30 = units[4] * end_prices[4]
end_total_value = end_value + end_value2 + end_value10 + end_value30
return( c(end_value, end_value2, end_value10, end_value30, end_total_value) )
}
# -------------------------------------------------------------------------- #
# Import Data
# -------------------------------------------------------------------------- #
MBS_info = read.csv("Data/MBS_Data/Mtge_Fields.csv")
typical_changes = read.csv("Data/Yield_Data/Typical_Changes.csv", header=TRUE)
interp_yields = read.csv("Data/Yield_Data/Interpolated_Yields.csv")
interp_yields$Date <- as.Date(interp_yields$Date, "%m/%d/%Y")
# Current Bond Prices
OM15 = interp_yields[interp_yields$Date >= as.Date('2015-01-02'), 2:3]
TB2 = read.csv('Data/Treasury_Bond_Data/Year2_Bond.csv', skip=6, header=TRUE)
TB10 = read.csv('Data/Treasury_Bond_Data/Year10_Bond.csv', skip=6, header=TRUE)
TB30 = read.csv('Data/Treasury_Bond_Data/Year30_Bond.csv', skip=6, header=TRUE)
# Futures Contract Prices
TU15 = read.csv('Data/Future_Data/TU15.csv', skip=5, header=TRUE)
TY15 = read.csv('Data/Future_Data/TY15.csv', skip=5, header=TRUE)
US15 = read.csv('Data/Future_Data/US15.csv', skip=5, header=TRUE)
# Fannie Mae MBS Prices
FNCL25 = read.csv('Data/MBS_Data/FNCL25.csv', skip=6, header=TRUE)
FNCL30 = read.csv('Data/MBS_Data/FNCL30.csv', skip=6, header=TRUE)
FNCL35 = read.csv('Data/MBS_Data/FNCL35.csv', skip=6, header=TRUE)
FNCL40 = read.csv('Data/MBS_Data/FNCL40.csv', skip=6, header=TRUE)
FNCL45 = read.csv('Data/MBS_Data/FNCL45.csv', skip=6, header=TRUE)
FNCL50 = read.csv('Data/MBS_Data/FNCL50.csv', skip=6, header=TRUE)
FNCL55 = read.csv('Data/MBS_Data/FNCL55.csv', skip=6, header=TRUE)
FNCL60 = read.csv('Data/MBS_Data/FNCL60.csv', skip=6, header=TRUE)
FNCL65 = read.csv('Data/MBS_Data/FNCL65.csv', skip=6, header=TRUE)
FNCL70 = read.csv('Data/MBS_Data/FNCL70.csv', skip=6, header=TRUE)
FNCL75 = read.csv('Data/MBS_Data/FNCL75.csv', skip=6, header=TRUE)
FNCL80 = read.csv('Data/MBS_Data/FNCL80.csv', skip=6, header=TRUE)
# Freddie Mac MBS Prices
FGLMC35 = read.csv('Data/MBS_Data/FGLMC35.csv', skip=6, header=TRUE)
FGLMC40 = read.csv('Data/MBS_Data/FGLMC40.csv', skip=6, header=TRUE)
FGLMC45 = read.csv('Data/MBS_Data/FGLMC45.csv', skip=6, header=TRUE)
FGLMC50 = read.csv('Data/MBS_Data/FGLMC50.csv', skip=6, header=TRUE)
FGLMC55 = read.csv('Data/MBS_Data/FGLMC55.csv', skip=6, header=TRUE)
FGLMC60 = read.csv('Data/MBS_Data/FGLMC60.csv', skip=6, header=TRUE)
FGLMC65 = read.csv('Data/MBS_Data/FGLMC65.csv', skip=6, header=TRUE)
FGLMC70 = read.csv('Data/MBS_Data/FGLMC70.csv', skip=6, header=TRUE)
FGLMC75 = read.csv('Data/MBS_Data/FGLMC75.csv', skip=6, header=TRUE)
FGLMC80 = read.csv('Data/MBS_Data/FGLMC80.csv', skip=6, header=TRUE)
cal = create.calendar(name = 'Actual', holidays = get_holidays(), weekdays = c("saturday","sunday"), start.date = "2015-01-01", end.date = "2015-12-31")
all_dates = as.Date('2015-01-02')
prev_date = as.Date('2015-01-02')
for (i in 1:22) {
next_date = add.bizdays(prev_date, 10, cal)
all_dates = c(all_dates, next_date)
prev_date = next_date
}
# -------------------------------------------------------------------------- #
# Format Data Tables
# -------------------------------------------------------------------------- #
TB2$Date <- as.Date(TB2$Date, "%m/%d/%y")
TB10$Date <- as.Date(TB10$Date, "%m/%d/%y")
TB30$Date <- as.Date(TB30$Date, "%m/%d/%y")
OM15$Date <- as.Date(OM15$Date, "%m/%d/%y")
TU15$Date <- as.Date(TU15$Date, "%m/%d/%y")
TY15$Date <- as.Date(TY15$Date, "%m/%d/%y")
US15$Date <- as.Date(US15$Date, "%m/%d/%y")
FNCL25$Date <- as.Date(FNCL25$Date, "%m/%d/%y")
FNCL30$Date <- as.Date(FNCL30$Date, "%m/%d/%y")
FNCL35$Date <- as.Date(FNCL35$Date, "%m/%d/%y")
FNCL40$Date <- as.Date(FNCL40$Date, "%m/%d/%y")
FNCL45$Date <- as.Date(FNCL45$Date, "%m/%d/%y")
FNCL50$Date <- as.Date(FNCL50$Date, "%m/%d/%y")
FNCL55$Date <- as.Date(FNCL55$Date, "%m/%d/%y")
FNCL60$Date <- as.Date(FNCL60$Date, "%m/%d/%y")
FNCL65$Date <- as.Date(FNCL65$Date, "%m/%d/%y")
FNCL70$Date <- as.Date(FNCL70$Date, "%m/%d/%y")
FNCL75$Date <- as.Date(FNCL75$Date, "%m/%d/%y")
FNCL80$Date <- as.Date(FNCL80$Date, "%m/%d/%y")
FGLMC35$Date <- as.Date(FGLMC35$Date, "%m/%d/%y")
FGLMC40$Date <- as.Date(FGLMC40$Date, "%m/%d/%y")
FGLMC45$Date <- as.Date(FGLMC45$Date, "%m/%d/%y")
FGLMC50$Date <- as.Date(FGLMC50$Date, "%m/%d/%y")
FGLMC55$Date <- as.Date(FGLMC55$Date, "%m/%d/%y")
FGLMC60$Date <- as.Date(FGLMC60$Date, "%m/%d/%y")
FGLMC65$Date <- as.Date(FGLMC65$Date, "%m/%d/%y")
FGLMC70$Date <- as.Date(FGLMC70$Date, "%m/%d/%y")
FGLMC75$Date <- as.Date(FGLMC75$Date, "%m/%d/%y")
FGLMC80$Date <- as.Date(FGLMC80$Date, "%m/%d/%y")
passthroughs = list(FNCL35, FNCL40, FNCL45, FNCL50, FNCL55, FNCL60, FNCL65, FNCL70, FNCL75, FNCL80, FGLMC35, FGLMC40, FGLMC45, FGLMC50, FGLMC55, FGLMC60, FGLMC65, FGLMC70, FGLMC75, FGLMC80)
table_indices = all_dates
nrows = length(table_indices)
riskless_profit = data.frame(matrix(vector(), nrows, 21, dimnames=list(c(), c("Date", 'FNCL35', 'FNCL40', 'FNCL45', 'FNCL50', 'FNCL55', 'FNCL60', 'FNCL65', 'FNCL70', 'FNCL75', 'FNCL80', 'FGLMC35', 'FGLMC40', 'FGLMC45', 'FGLMC50', 'FGLMC55', 'FGLMC60', 'FGLMC65', 'FGLMC70', 'FGLMC75', 'FGLMC80'))),stringsAsFactors=F)
riskless_profit["Date"] = table_indices
riskless_profit$Date <- as.Date(riskless_profit$Date, "%Y/%m/%d")
hedge3_profit = riskless_profit
hedge2_profit = riskless_profit
hedge1_profit = riskless_profit
# profit3_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit2_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit1_difference_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit3_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit2_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# profit1_percent_change = pandas.DataFrame(index = table_indices, columns = table_columns, dtype = float)
# -------------------------------------------------------------------------- #
# Test Code
# -------------------------------------------------------------------------- #
# all_dates = bizseq(as.Date('2015-01-02'), as.Date('2015-12-31'), cal)
no_shift = data.frame(matrix(rep(0,11), 1, 11, dimnames=list(c(), c('X1','X3','X6','X12','X24','FX36','X48','X60','X84','X120','X360'))),stringsAsFactors=F)
level_shift = typical_changes[1, 3:13]
twist_shift = typical_changes[2, 3:13]
curve_shift = typical_changes[3, 3:13]
all_dates = all_dates[2:2]
start_time <- proc.time()
for (start_date in all_dates) {
# start_date = as.Date('2015-01-02')
start_date = as.Date(start_date, origin = '1970-01-01')
end_date = add.bizdays(start_date, 21, cal)
if ((start_date %in% TB10$Date) & (end_date %in% TB10$Date)) {
T_start_prices = get_T_prices(start_date)
T_end_prices = get_T_prices(end_date)
level_TF_changes = get_TF_price_changes(start_date, T_start_prices, level_shift)
twist_TF_changes = get_TF_price_changes(start_date, T_start_prices, twist_shift)
curve_TF_changes = get_TF_price_changes(start_date, T_start_prices, curve_shift)
for (i in 1:1) {
MBS_start_price = get_MBS_price(i, start_date)
MBS_end_price = get_MBS_price(i, end_date)
level_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, level_shift)
twist_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, twist_shift)
curve_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, curve_shift)
level_changes = c(level_MBS_changes, level_TF_changes)
twist_changes = c(twist_MBS_changes, twist_TF_changes)
curve_changes = c(curve_MBS_changes, curve_TF_changes)
start_prices = c(MBS_start_price, T_start_prices)
end_prices = c(MBS_end_price, T_end_prices)
for (h in 1:3) {
ratios = get_ratios(h, level_changes, twist_changes, curve_changes)
start_values = get_start_values(start_prices, ratios)
units = get_units(start_prices, start_values)
end_values = get_end_values(end_prices, units)
# Update Tables
start_total_value = start_values[5]
end_total_value = end_values[5]
dollar_change = end_total_value - start_total_value
if (h == 3)
hedge3_profit[hedge3_profit$Date == start_date, i+1] = dollar_change
if (h == 2)
hedge2_profit[hedge2_profit$Date == start_date, i+1] = dollar_change
if (h == 1)
hedge1_profit[hedge1_profit$Date == start_date, i+1] = dollar_change
}
start_value = (100/MBS_start_price)*100*10000
riskless_rate = OM15[OM15$Date == start_date, 'X1'] / 100
riskless_value = start_value * riskless_rate
riskless_profit[riskless_profit$Date == start_date, i+1] = riskless_value
}
end_time = proc.time() - start_time
print(end_time)
# hedge3_profit.dropna(inplace=True)
# hedge2_profit.dropna(inplace=True)
# hedge1_profit.dropna(inplace=True)
# riskless_profit.dropna(inplace=True)
# -------------------------------------------------------------------------- #
# Test Code 2
# -------------------------------------------------------------------------- #
# profit3_difference_change = hedge3_profit - riskless_profit
# profit2_difference_change = hedge2_profit - riskless_profit
# profit1_difference_change = hedge1_profit - riskless_profit
#
# profit3_percent_change = profit3_difference_change / riskless_profit
# profit2_percent_change = profit2_difference_change / riskless_profit
# profit1_percent_change = profit1_difference_change / riskless_profit
# -------------------------------------------------------------------------- #
library(BondLab)
6/2
max(6,1)
max(6,24)
library(BondLab)
6 %% 6
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
50 * 10000 * 12
library(BondLab)
c(0,1)
typeof(c(0,1))
typeof(as.character(c(0,1)))
as.character(c(0,1))
typeof(c(1,0))
c(1,0)
c(1,0) == 10
c(1,0) == 1 0
c(1,0) == as.double(10)
c(1,0) == c(1,0)
typeof(c(FALSE, FALSE))
c(FALSE, FALSE)
test <- c(FALSE, FALSE)
test == c(FALSE, FALSE)
library(BondLab)
as.numeric(TRUE)
as.numeric(FALSE)
library(BondLab)
12-6
12-6-1
2007-2006
library(BondLab)
#'@description Simulation of the 3-mo, 2-year, and 10-year forward.
library(BondLab)
termstrc::spr_dl
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
.37/100
3/100
library(BondLab)
splines::interpSpline(
Forward.Rate, seq(1:length(Forward.Rate)), bSpline = TRUE, na.action = na.omit))$y
library(BondLab)
700 * 25
5000 8 25
5000 * 25
5000 * 12
1000 * 12
1000 * 50
3000 * 50
library(BondLab)
Sys.glob(paste(system.file(package = "BondLab")
Sys.glob(paste(system.file(package = "BondLab")))
paste(system.file(package = "BondLab"))
paste(system.file(package = "BondLab"), "/BondData")
paste0(system.file(package = "BondLab"), "/BondData")
paste0(system.file(package = "BondLab"), "/BondData/MBSData")
library(BondLab)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
build_vignettes("BondLab")
build_vignettes("~/BondLab/")
build_vignettes("BondLab")
build_vignettes("~/BondLab/")
dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
Price <- PriceTypes(price = price)
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
GetSwapCurve('05-19-2017, TRUE')
GetSwapCurve('05-19-2017, save.curve = TRUE')
try(SwapRateData(datafile = paste(system.file(package = "BondLab"),"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
maturity <- c("",.0833, .25, .5, 1, 2, 3, 4, 5, 7, 10, 30)
try(SwapRateData(datafile = paste(system.file(package = "BondLab"),"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
SwapCurve <-  try(SwapRate(
datafile = paste(system.file(package = "BondLab"),
"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
GetSwapCurve('05-19-2017', save.curve = TRUE)
build_vignettes("~/BondLab/")
library(BondLab)
library("ggthemes", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
require(BondLab)
require(ggplot2)
require(scales)
require(reshape2)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
require(BondLab)
require(ggplot2)
require(ggthemes)
require(scales)
require(reshape2)
# make data for graph 3_6 using the mBS040
require(BondLab)
require(ggplot2)
require(scales)
require(reshape2)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = 'tableau20', guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
library(BondLab)
685/107
library(BondLab)
PriceTypes <- function(price){
PriceBasis = 100
Convertto32nds <- function(price){
#convert price to numeric value
Price = as.numeric(price)
tail32nds = round(x = (Price - floor(x = Price)) * 32, digits = 4)
Price = paste(as.character(floor(x=Price)),
"-",
as.character(tail32nds),
sep = "")
return(Price)
}
ConverttoDecimal <- function(price, units = 32){
SplitPrice = strsplit(as.character(price), "-")
handle = as.numeric(SplitPrice[[1]][1])
TailDecimal = signif(as.numeric(SplitPrice[[1]][2])/units,8)
TailDecimal = gsub("(^|[^.0-9])0+", "\\1", TailDecimal, perl = TRUE)
Price = paste(as.character(handle),
as.character(TailDecimal),sep="")
return(Price)
}
ConverttoString <- function(price.decimal){
sprintf("%.8f", price.decimal)
}
# Convert Price when entered as a decimal value
if(grepl(".", as.character(price), fixed = TRUE) == TRUE){
Price_Decimal = format(price, nsmall =8)
Price_32nds = Convertto32nds(price = price)
Price_Basis = format(as.numeric(price) / PriceBasis, nsmall = 8)
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(Price_Decimal))
}
if(grepl("-", as.character(price), fixed = TRUE) == TRUE){
Price_Decimal = as.numeric(ConverttoDecimal(price = price))
Price_32nds = price
Price_Basis = as.numeric(format(as.numeric(Price_Decimal)/PriceBasis, nsmall = 8))
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(ConverttoDecimal(price = price)))
}
new("PriceTypes",
PriceDecimal = as.numeric(Price_Decimal),
Price32nds = Price_32nds,
PriceBasis = as.numeric(Price_Basis),
PriceDecimalString = Price_Decimal_String
)
}
library(BondLab)
dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData")
paste0(system.file(package = "BondLab"), "/BondData/BondData")
BondData <- dbConnect(SQLite(), dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData"))
library(BondLab)
2.15/.05
2.142/.05
2.13/.05
2.138/.05
library(BondLab)
5/3200 * 1000000
library(BondLab)
500 * 5000
500 * 1000
500 * 500
500 * 500 * 12
200000/10
200000/120
1500 * 11 * 12
200000/30
200000/30/12
library(BondLab)
