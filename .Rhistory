if ((start_date %in% TB10$Date) & (end_date %in% TB10$Date)) {
T_start_prices = get_T_prices(start_date)
T_end_prices = get_T_prices(end_date)
level_TF_changes = get_TF_price_changes(start_date, T_start_prices, level_shift)
twist_TF_changes = get_TF_price_changes(start_date, T_start_prices, twist_shift)
curve_TF_changes = get_TF_price_changes(start_date, T_start_prices, curve_shift)
for (i in 1:1) {
MBS_start_price = get_MBS_price(i, start_date)
MBS_end_price = get_MBS_price(i, end_date)
level_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, level_shift)
twist_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, twist_shift)
curve_MBS_changes = get_MBS_price_changes(i, start_date, MBS_start_price, curve_shift)
level_changes = c(level_MBS_changes, level_TF_changes)
twist_changes = c(twist_MBS_changes, twist_TF_changes)
curve_changes = c(curve_MBS_changes, curve_TF_changes)
start_prices = c(MBS_start_price, T_start_prices)
end_prices = c(MBS_end_price, T_end_prices)
for (h in 1:3) {
ratios = get_ratios(h, level_changes, twist_changes, curve_changes)
start_values = get_start_values(start_prices, ratios)
units = get_units(start_prices, start_values)
end_values = get_end_values(end_prices, units)
# Update Tables
start_total_value = start_values[5]
end_total_value = end_values[5]
dollar_change = end_total_value - start_total_value
if (h == 3)
hedge3_profit[hedge3_profit$Date == start_date, i+1] = dollar_change
if (h == 2)
hedge2_profit[hedge2_profit$Date == start_date, i+1] = dollar_change
if (h == 1)
hedge1_profit[hedge1_profit$Date == start_date, i+1] = dollar_change
}
start_value = (100/MBS_start_price)*100*10000
riskless_rate = OM15[OM15$Date == start_date, 'X1'] / 100
riskless_value = start_value * riskless_rate
riskless_profit[riskless_profit$Date == start_date, i+1] = riskless_value
}
end_time = proc.time() - start_time
print(end_time)
# hedge3_profit.dropna(inplace=True)
# hedge2_profit.dropna(inplace=True)
# hedge1_profit.dropna(inplace=True)
# riskless_profit.dropna(inplace=True)
# -------------------------------------------------------------------------- #
# Test Code 2
# -------------------------------------------------------------------------- #
# profit3_difference_change = hedge3_profit - riskless_profit
# profit2_difference_change = hedge2_profit - riskless_profit
# profit1_difference_change = hedge1_profit - riskless_profit
#
# profit3_percent_change = profit3_difference_change / riskless_profit
# profit2_percent_change = profit2_difference_change / riskless_profit
# profit1_percent_change = profit1_difference_change / riskless_profit
# -------------------------------------------------------------------------- #
library(BondLab)
6/2
max(6,1)
max(6,24)
library(BondLab)
6 %% 6
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
50 * 10000 * 12
library(BondLab)
c(0,1)
typeof(c(0,1))
typeof(as.character(c(0,1)))
as.character(c(0,1))
typeof(c(1,0))
c(1,0)
c(1,0) == 10
c(1,0) == 1 0
c(1,0) == as.double(10)
c(1,0) == c(1,0)
typeof(c(FALSE, FALSE))
c(FALSE, FALSE)
test <- c(FALSE, FALSE)
test == c(FALSE, FALSE)
library(BondLab)
as.numeric(TRUE)
as.numeric(FALSE)
library(BondLab)
12-6
12-6-1
2007-2006
library(BondLab)
#'@description Simulation of the 3-mo, 2-year, and 10-year forward.
library(BondLab)
termstrc::spr_dl
library(BondLab)
library("BondLab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(BondLab)
.37/100
3/100
library(BondLab)
splines::interpSpline(
Forward.Rate, seq(1:length(Forward.Rate)), bSpline = TRUE, na.action = na.omit))$y
library(BondLab)
700 * 25
5000 8 25
5000 * 25
5000 * 12
1000 * 12
1000 * 50
3000 * 50
library(BondLab)
Sys.glob(paste(system.file(package = "BondLab")
Sys.glob(paste(system.file(package = "BondLab")))
paste(system.file(package = "BondLab"))
paste(system.file(package = "BondLab"), "/BondData")
paste0(system.file(package = "BondLab"), "/BondData")
paste0(system.file(package = "BondLab"), "/BondData/MBSData")
library(BondLab)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
build_vignettes("BondLab")
build_vignettes("~/BondLab/")
build_vignettes("BondLab")
build_vignettes("~/BondLab/")
dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
Price <- PriceTypes(price = price)
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
GetSwapCurve('05-19-2017, TRUE')
GetSwapCurve('05-19-2017, save.curve = TRUE')
try(SwapRateData(datafile = paste(system.file(package = "BondLab"),"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
maturity <- c("",.0833, .25, .5, 1, 2, 3, 4, 5, 7, 10, 30)
try(SwapRateData(datafile = paste(system.file(package = "BondLab"),"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
SwapCurve <-  try(SwapRate(
datafile = paste(system.file(package = "BondLab"),
"/RatesData/Today.csv", sep = ""),
maturityvector = maturity))
GetSwapCurve('05-19-2017', save.curve = TRUE)
build_vignettes("~/BondLab/")
library(BondLab)
library("ggthemes", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
require(BondLab)
require(ggplot2)
require(scales)
require(reshape2)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
require(BondLab)
require(ggplot2)
require(ggthemes)
require(scales)
require(reshape2)
# make data for graph 3_6 using the mBS040
require(BondLab)
require(ggplot2)
require(scales)
require(reshape2)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = tableau20, guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = 'tableau20', guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
library(BondLab)
685/107
library(BondLab)
PriceTypes <- function(price){
PriceBasis = 100
Convertto32nds <- function(price){
#convert price to numeric value
Price = as.numeric(price)
tail32nds = round(x = (Price - floor(x = Price)) * 32, digits = 4)
Price = paste(as.character(floor(x=Price)),
"-",
as.character(tail32nds),
sep = "")
return(Price)
}
ConverttoDecimal <- function(price, units = 32){
SplitPrice = strsplit(as.character(price), "-")
handle = as.numeric(SplitPrice[[1]][1])
TailDecimal = signif(as.numeric(SplitPrice[[1]][2])/units,8)
TailDecimal = gsub("(^|[^.0-9])0+", "\\1", TailDecimal, perl = TRUE)
Price = paste(as.character(handle),
as.character(TailDecimal),sep="")
return(Price)
}
ConverttoString <- function(price.decimal){
sprintf("%.8f", price.decimal)
}
# Convert Price when entered as a decimal value
if(grepl(".", as.character(price), fixed = TRUE) == TRUE){
Price_Decimal = format(price, nsmall =8)
Price_32nds = Convertto32nds(price = price)
Price_Basis = format(as.numeric(price) / PriceBasis, nsmall = 8)
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(Price_Decimal))
}
if(grepl("-", as.character(price), fixed = TRUE) == TRUE){
Price_Decimal = as.numeric(ConverttoDecimal(price = price))
Price_32nds = price
Price_Basis = as.numeric(format(as.numeric(Price_Decimal)/PriceBasis, nsmall = 8))
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(ConverttoDecimal(price = price)))
}
new("PriceTypes",
PriceDecimal = as.numeric(Price_Decimal),
Price32nds = Price_32nds,
PriceBasis = as.numeric(Price_Basis),
PriceDecimalString = Price_Decimal_String
)
}
library(BondLab)
dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData")
paste0(system.file(package = "BondLab"), "/BondData/BondData")
BondData <- dbConnect(SQLite(), dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData"))
library(BondLab)
2.15/.05
2.142/.05
2.13/.05
2.138/.05
library(BondLab)
5/3200 * 1000000
library(BondLab)
500 * 5000
500 * 1000
500 * 500
500 * 500 * 12
200000/10
200000/120
1500 * 11 * 12
200000/30
200000/30/12
library(BondLab)
original.bal =1000000
library(BondLab)
\includegraphics[scale=.75]{ch4_1.eps}
knitr::opts_chunk$set(cache=FALSE)
require(ggplot2)
require(reshape2)
require(scales)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
bond.id <- MBS(cusip = cusip)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
PassThrough <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# curve spreads are also returned in the mortgagescenario object
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
NoChangeScenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
HorizonReturn(NoChangeScenario)
ZeroVolSpread(NoChangeScenario)
SpreadToCurve(NoChangeScenario)
SpreadToBenchmark(NoChangeScenario)
BenchMark(NoChangeScenario)
WAL(PassThrough)
MyScenario <- function(bond.id = "character",
trade.date = "character",
settlement.date = "character",
prepayment = "character",
...,
price = NULL,
spread = NULL,
CPR = numeric()){
Price <- PriceTypes(price = price)
bond.id <- MBS(MBS.id = bond.id)
rates.data <- Rates(trade.date = trade.date)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = prepayment,
CPR = CPR)
CashFlow <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
Scenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
return(Scenario)
}
devtools::build_vignettes('BondLab')
devtools::build_vignettes('~/BondLab/')
library(BondLab)
unlink('inst/doc/BondLab_cache', recursive = TRUE)
getwd()
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
12/2
as.Date("05-31-2017", %m-%d-%Y)
as.Date("05-31-2017", "%m-%d-%Y")
seq(as.Date("05-31-2017", "%m-%d-%Y"), c(100, 101, 103), "days")
seq(as.Date("05-31-2017", "%m-%d-%Y"), as.Date("05-31-1019, format = "m-%d-%Y"), c(100, 101, 103), "days")
seq(1, 24, 1)
seq(1, 24, 1) * 6
months <- seq(1, 24, 1) * 6
