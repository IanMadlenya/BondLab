# Bond Lab is a software application for the analysis of 
# fixed income securities it provides a suite of applications
# in addition to standard fixed income analysis bond lab provides 
# for the specific analysis of structured products residential mortgage backed securities, 
# asset backed securities, and commerical mortgage backed securities
# License GPL3
# Copyright (C) 2014  Glenn M Schultz, CFA
# Fair use of the Bond Lab trademark is limited to promotion of the use of the software or 
# book "Investing in Mortgage Backed Securities Using Open Source Analytics" 


# ==== This section begins the REMIC Generics that are used to initialize a REMIC structure
# REMIC construction requires a REMIC at issuance disclosure file (RAID), tranche, collateral groups,
# and REMIC Disclosure month end file to construct a REMIC structure file.

# RAID file is created and serialized in a single step the collateral, group and factors require and addtional
# step to aggregate the data into the REMIC structure these are outlined after the RAID generics


#standard Generic MakeRAID creates the RAID data and serializes it to the RAID Directory
# standard Generic "new" for populating and empty class (RAID constructor)
setGeneric("RAID", function(DealName = "character", Issuer = "character", DealPriceDate = "character", DealSettlementDate = "character",
            Underwriter = "character", NumberofTranches = numeric(), NumberPacSchedules = numeric(), NumberofGroups = numeric(),
            DealSize = numeric(), CollateralAmount = numeric()) {standardGeneric("RAID")})

# standard Generic serializes RAID data to RAID Director
setGeneric("MakeRAID", function(DealName = "character", Issuer = "character", DealPriceDate = "character", DealSettlementDate = "character",
                                Underwriter = "character", NumberofTranches = numeric(), NumberPacSchedules = numeric(), NumberofGroups = numeric(), 
                                DealSize = numeric(),CollateralAmount = numeric()) {standardGeneric("MakeRAID")})


# Each of the below require three steps to construct a REMIC structure file
# 1) constructor "new" function
# 2) Make file which calls the constructor and serializes to the appropraite director
# 3) aggregator function which is called by the REMIC constructor function to aggregate
#    tranche, collateral, and factor data

# =================== Tranches ======================
# standard generic "new" for populating empty class tranchedetails
setGeneric("TrancheDetails", function( DealName = "character", TrancheNumber = "character", TrancheName = "character", TranchePrincipal = "character",
            TrancheInterest = "character", Cusip = "character", TrancheOrigBal = numeric(), TrancheDatedDate = "character",
            TrancheFirstPmtDate = "character", TrancheFinalPmtDate = "character", TrancheCoupon = numeric(), Delay = numeric(),
            PrinPmtFrequency = numeric(), InterestPmtFrequency = numeric(), FloaterIndex = "character", PacLowBand = numeric(),
            PacHighBand = numeric(), Group = numeric()) {standardGeneric("TrancheDetails")})

#standard Generic MakeTrance creates Tranche data and serializes to the tranches director
setGeneric("MakeTranche", function(  DealName = "character", TrancheNumber = "character", TrancheName = "character",
                                     TranchePrincipal = "character", TrancheInterest = "character", Cusip = "character",
                                     TrancheOrigBal = numeric(), TrancheDatedDate = "character", TrancheFirstPmtDate = "character",
                                     TrancheFinalPmtDate = "character",TrancheCoupon = numeric(), Delay = numeric(), 
                                     PrinPmtFrequency = numeric(),InterestPmtFrequency = numeric(), FloaterIndex = "character", 
                                     PacLowBand = numeric(), PacHighBand = numeric(), Group = numeric())
                                    {standardGeneric("MakeTranche")})

# standard Generic aggregates tranche data for the REMIC structure
setGeneric("Tranches", function(NumberofTranches = numeric(), DealName = "character") {standardGeneric("Tranches")})

# ================== Collateral =====================

#standard Generic "new" collateral data populates empty class
setGeneric("Collateral", function(DealName = "character", Group = numeric(), Cusip = list(), OrigBal = list())
{standardGeneric("Collateral")})

# standard Generic makes the collateral file and serializes it the Groups directory
setGeneric("MakeCollateral", function(DealName = "character", Group = numeric(), Cusip = list(), OrigBal = list())
{standardGeneric("MakeCollateral")})


# standard Generic aggregates the collateral group data for the REMIC structure 
setGeneric("CollateralGroup", function(NumberofGroups = numeric(), DealName = "character") {standardGeneric("CollateralGroup")})

# ================= Factors =======================

# standard Generic "new" for RDME populates empty class
setGeneric("RDME", function(Cusip = "character", PaymentDate = "character", Coupon = numeric(), Factor = numeric())
{standardGeneric("RDME")})

# standard Generic makes the factor file and serializes it the RDME file
setGeneric("MakeRDME", function(DealName = "character", TrancheNumber = numeric(), Cusip = "character", 
          PaymentDate = "character", Coupon = numeric(), Factor = numeric()) {standardGeneric("MakeRDME")})

# standard Generic aggregator of factor date for REMIC structure
setGeneric("RDMEData", function(NumberofTranches = numeric(), DealName = "character") {standardGeneric("RDMEData")})


# ============= REMIC structure Superclass ======
# standard Generic for the construction of the REMIC superclass

setGeneric("REMICStructure", function(DealName = "character") {standardGeneric("REMICStructure")})